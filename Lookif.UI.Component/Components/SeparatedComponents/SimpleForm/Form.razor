@namespace Lookif.UI.Component.Components.SeparatedComponents.SimpleForm
@using Lookif.UI.Component.Date.DateTimePickers
@using Microsoft.Extensions.Localization;
@using Lookif.UI.Component.DropDown
@using Lookif.UI.Component.Resources

@using System.Globalization
@inject IStringLocalizer<Resource> basicResource
@{
    relatedSource = ((IStringLocalizer)Resource)?.GetAllStrings()?.ToList();

}
@if (!CultureInfo.CurrentCulture.TextInfo.IsRightToLeft)
{


    <style>
        * {
            text-align: left;
            direction: ltr;
        }

        .FormFields {
            float: left;
        }

       
    </style>
}
else
{
    <style>
        * {
            text-align: right;
            direction: rtl;
        }

        .FormFields {
            float: right
        }
    </style>
}
<div class="col-12  ">
    @foreach (var item in ItemsOfClasses.OrderBy(x => x.Order))
    {
        <div class="col-12 col-md-6 FormFields"> 

            <div class="col-12">
            <label style=" font-size: larger; font-weight: bolder;">
                @{
                    if (relatedSource is null) // When there is no source file
                    {
                        if (@item.DisplayName is null) // when there is no displayName
                        {
                            @item.Name
                        }
                        else
                        {
                            @item.DisplayName
                        }
                    }
                    else
                    {
                        var value = relatedSource.FirstOrDefault(x => x.Name == @item.Name)?.Value;
                        if (value == "")
                        {
                            @item.Name
                        }
                        else
                        {
                            @value
                        }

                    }
                }

            </label>
            @if (item.Type is TypeOfInput.Text)
            {
                <input class="form-control" @bind="item.Value" type="text" style="width: inherit;" />
            }
            else if (item.Type is TypeOfInput.DropDown or TypeOfInput.Enum)
            {
                <DropDownSelective SelectedOption="@item.Value" Records="@item.Collection" Key="Name" Value="Id" @bind-ReturnValue="item.Value"></DropDownSelective>
            }
            else if (item.Type is TypeOfInput.DateTime)
            {
                <DateTimePickerDD ValueChanged="newValue => item.DateTime = newValue" Value="item.DateTime"></DateTimePickerDD>

            }
            else if (item.Type is TypeOfInput.CheckBox)
            {
                <input class="form-control" type="checkbox" @onchange='(x=>item.Value = ((bool)x.Value).ToString())' />

            }
        </div>
    </div>
}


    <div>
        <button class="btn btn-success col-md-3  mt-md-4 mb-md-4 mt-sm-1 mb-sm-1" @onclick="Add">@(Key == default ? @basicResource["Add"]: @basicResource["Edit"])</button>
        <button class="btn btn-warning col-md-3  mt-md-4 mb-md-4 mt-sm-1 mb-sm-1" @onclick="Clear">@basicResource["Clear"]</button>
    </div>
    </div>