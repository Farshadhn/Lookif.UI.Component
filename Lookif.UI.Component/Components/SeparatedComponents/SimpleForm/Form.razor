@namespace Lookif.UI.Component.Components.SeparatedComponents.SimpleForm
@using Lookif.UI.Component.Date.DateTimePickers
@using Lookif.UI.Component.DropDown
@using Lookif.UI.Component.Resources

@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Localization;

@inject IStringLocalizer<Resource> basicResource
@{
    relatedSource = ((IStringLocalizer)Resource)?.GetAllStrings()?.ToList();

}
<style>
    .required:after {
        content: " *";
        color: red;
    }
</style>
<div class="col-12 d-inline-block">

    @foreach (var item in ItemsOfClasses.OrderBy(x => x.Order))
    {
        var DivSize = item.Appearance?.DivSize == 0 ? 4 : item.Appearance.DivSize;
        var LabelSize = item.Appearance?.LabelSize == 0 ? 2 : item.Appearance.LabelSize;
        var InputSize = item.Appearance?.InputSize == 0 ? 10 : item.Appearance.InputSize;

        <div class='form-group col-@(DivSize) FormAlign LH' style="display: flex; -ms-flex-wrap: wrap; flex-wrap: wrap">


            <label class='col-@(LabelSize) col-form-label @(item.Required ?"required": "")' style='font-size: inherit; font-weight: bolder;'>

                @if (relatedSource is null) // When there is no source file
                {
                    if (@item.DisplayName is null) // when there is no displayName
                    {
                        @item.Name
                    }
                    else
                    {
                        @item.DisplayName
                    }
                }
                else
                {
                    var value = relatedSource.FirstOrDefault(x => x.Name == @item.Name)?.Value;
                    if (value == "")
                    {
                        @item.Name
                    }
                    else
                    {
                        @value
                    }

                }

            </label>

            <div class="col-@(InputSize)">

                @if (item.Type is TypeOfInput.Text)
                {
                    <input class="form-control LH " @bind="item.Value" type="text" style="width: inherit;" />
                }
                else if (item.Type is TypeOfInput.DropDown or TypeOfInput.MultipleSelectedDropDown or TypeOfInput.Enum)
                {
                    <DropDownSelective Multiple=@(item.Type == TypeOfInput.MultipleSelectedDropDown)
                               SelectedOption="@item.ValueColection"
                               Records="@item.Collection"
                               Key="Id"
                               Value="Name"
                               @bind-ReturnValue="item.ValueColection"></DropDownSelective>
                }
                else if (item.Type is TypeOfInput.DateTime)
                {
                    <DateTimePickerDD ValueChanged="newValue => item.DateTime = newValue" Value="item.DateTime"></DateTimePickerDD>

                }
                else if (item.Type is TypeOfInput.CheckBox)
                {
                    if (item.Valuebool)
                    {
                        <input class="form-control LH" type="checkbox" checked @onchange='(x => item.Value = ((bool)x.Value).ToString())' />
                    }
                    else
                    {
                        <input class="form-control LH" type="checkbox" @onchange='(x => item.Value = ((bool)x.Value).ToString())' />
                    }

                }
                else if (item.Type is TypeOfInput.File)
                {
                    <InputFile OnChange="(e)=>Upload(e,item)" multiple />

                }
            </div>
        </div>
    }



</div>
<div class="col-12">
    <button class="btn btn-success col-2  mt-md-4 mb-md-4 mt-sm-1 mb-sm-1" style="max-width:170px" @onclick="Add">@(Key == default ? @basicResource["Add"]: @basicResource["Edit"])</button>
    <button class="btn btn-warning col-2  mt-md-4 mb-md-4 mt-sm-1 mb-sm-1" style="max-width: 170px " @onclick="Clear">@basicResource["Clear"]</button>
</div> 