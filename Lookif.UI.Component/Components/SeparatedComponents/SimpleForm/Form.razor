@namespace Lookif.UI.Component.Components.SeparatedComponents.SimpleForm
@using Lookif.UI.Component.Date.DateTimePickers
@using Lookif.UI.Component.DropDown
@using Lookif.UI.Component.Resources

@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Localization;
@inject IStringLocalizer<Resource> basicResource
@{
    relatedSource = ((IStringLocalizer)Resource)?.GetAllStrings()?.ToList();

}

<div class="col-12 " style="max-height:90vh;overflow:auto">
    @foreach (var item in ItemsOfClasses.OrderBy(x => x.Order))
    {
        <div class="form-group col-lg-6 col-12 FormAlign" style="display: flex; -ms-flex-wrap: wrap; flex-wrap: wrap; ">

            <label class="col-sm-4 col-form-label" style=" font-size: larger; font-weight: bolder;">
                @{
                    if (relatedSource is null) // When there is no source file
                    {
                        if (@item.DisplayName is null) // when there is no displayName
                        {
                            @item.Name
                        }
                        else
                        {
                            @item.DisplayName
                        }
                    }
                    else
                    {
                        var value = relatedSource.FirstOrDefault(x => x.Name == @item.Name)?.Value;
                        if (value == "")
                        {
                            @item.Name
                        }
                        else
                        {
                            @value
                        }

                    }
                }

            </label>
            <div class="col-sm-8">
                @if (item.Type is TypeOfInput.Text)
                {
                    <input class="form-control" @bind="item.Value" type="text" style="width: inherit;" />
                }
                else if (item.Type is TypeOfInput.DropDown or TypeOfInput.Enum)
                {
                    <DropDownSelective SelectedOption="@item.Value" Records="@item.Collection" Key="Name" Value="Id" @bind-ReturnValue="item.Value"></DropDownSelective>
                }
                else if (item.Type is TypeOfInput.DateTime)
                {
                    <DateTimePickerDD ValueChanged="newValue => item.DateTime = newValue" Value="item.DateTime"></DateTimePickerDD>

                }
                else if (item.Type is TypeOfInput.CheckBox)
                {
                    <input class="form-control" type="checkbox" checked='@(item.Valuebool ?"checked":""))' @onchange='(x => item.Value = ((bool)x.Value).ToString())' />

                }
                else if (item.Type is TypeOfInput.File)
                {
                    <InputFile OnChange="(e)=>Upload(e,item)" multiple />

                }
            </div>
        </div>
    }



</div>
<div class="col-12">
    <button class="btn btn-success col-2  mt-md-4 mb-md-4 mt-sm-1 mb-sm-1" style="max-width:170px" @onclick="Add">@(Key == default ? @basicResource["Add"]: @basicResource["Edit"])</button>
    <button class="btn btn-warning col-2  mt-md-4 mb-md-4 mt-sm-1 mb-sm-1" style="max-width: 170px " @onclick="Clear">@basicResource["Clear"]</button>
</div>