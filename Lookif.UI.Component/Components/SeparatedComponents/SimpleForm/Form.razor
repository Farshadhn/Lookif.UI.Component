@namespace Lookif.UI.Component.Components.SeparatedComponents.SimpleForm
@using Lookif.Component.DropDown.Main;
@using Lookif.UI.Component.Date.DateTimePickers
@using Lookif.UI.Component.DropDown
@using Lookif.UI.Component.Resources
@using Lookif.Component.DateTimePicker;
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Localization;

@inject IStringLocalizer<Resource> basicResource

@code {
    [Parameter]
    public string Title { get; set; } = "افزودن";
}

@{
    relatedSource = ((IStringLocalizer)Resource)?.GetAllStrings()?.ToList();
}

<style>    .color-preview {
        padding: 0 !important;
        width: 50px;
        height: 50px;
        border-radius: 4px;
        border: 1px solid #dee2e6;
    }

    .form-container {
        min-width: 60vw;
        padding: 2rem;
        background: #ffffff;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .form-header {
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #e2e8f0;
    }

    .form-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: #2d3748;
        margin: 0;
    }

    .form-group {
        margin-bottom: 1.5rem;
        transition: all 0.3s ease;
    }

        .form-group:hover {
            transform: translateY(-2px);
        }

    .form-label {
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 0.5rem;
        display: block;
        transition: color 0.3s ease;
    }

        .form-label.required:after {
            content: " *";
            color: #e53e3e;
            font-weight: bold;
        }

    .form-control {
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        padding: 0.75rem 1rem;
        transition: all 0.3s ease;
        width: 100%;
        background-color: #f8fafc;
    }

        .form-control:focus {
            border-color: #4299e1;
            box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);
            outline: none;
        }

        .form-control:hover {
            border-color: #cbd5e0;
        }

    input[type=checkbox] {
        width: 20px;
        height: 20px;
        border-radius: 4px;
        border: 2px solid #e2e8f0;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        input[type=checkbox]:checked {
            background-color: #4299e1;
            border-color: #4299e1;
        }

    .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .btn-success {
        background-color: #48bb78;
        color: white;
    }

        .btn-success:hover {
            background-color: #38a169;
            transform: translateY(-2px);
        }

    .btn-warning {
        background-color: #ed8936;
        color: white;
    }

        .btn-warning:hover {
            background-color: #dd6b20;
            transform: translateY(-2px);
        }

    .form-actions {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
        justify-content: flex-end;
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* Mobile Responsive Styles */
    @@media (max-width: 768px) {
        .form-container {
            min-width: 100%;
            padding: 1rem;
        }

        .col-4, .col-3, .col-9 {
            width: 100% !important;
            flex: 0 0 100% !important;
            max-width: 100% !important;
        }

        .form-actions {
            flex-direction: column;
            width: 100%;
        }

        .btn {
            width: 100%;
            margin-bottom: 0.5rem;
        }
    }
</style>

@if (!ready)
{
    <div class="loading-overlay">
        <div class="loading-spinner"></div>
    </div>
    return;
}

<div class="form-container PF">
    <div class="form-header">
        <h2 class="form-title">@Title</h2>
    </div>
    <div class="row">
        @foreach (var item in ItemsOfClasses.OrderBy(x => x.Order))
        {
            var DivSize = item.Appearance?.DivSize == 0 ? 4 : item.Appearance.DivSize;
            var LabelSize = item.Appearance?.LabelSize == 0 ? 3 : item.Appearance.LabelSize;
            var InputSize = item.Appearance?.InputSize == 0 ? 9 : item.Appearance.InputSize;

            <div class="col-@(DivSize)">
                <div class="form-group">
                    <label class='form-label @(item.Required ? "required" : "")'>
                        @if (relatedSource is null)
                        {
                            @(item.DisplayName ?? item.Name)
                        }
                        else
                        {
                            var value = relatedSource.FirstOrDefault(x => x.Name == item.Name)?.Value;
                            @(string.IsNullOrEmpty(value) ? item.Name : value)
                        }
                    </label>

                    <div class="form-control-wrapper">
                        @if (item.Type is TypeOfInput.Text)
                        {
                            <input class="form-control" @bind="item.Value" type="text" />
                        }
                        else if (item.Type is TypeOfInput.DropDown or TypeOfInput.MultipleSelectedDropDown or TypeOfInput.Enum)
                        {
                            <LFDropDown Multiple=@(item.Type == TypeOfInput.MultipleSelectedDropDown)
                                        SelectedOption="@item.ValueColection"
                                        Records="@item.Collection"
                                        Key="Id"
                                        Value="Name"
                                        @bind-ReturnValue="@item.ValueColection" />
                        }
                        else if (item.Type is TypeOfInput.DateTime)
                        {
                            <LFDateTimePicker ValueChanged="newValue => item.DateTime = newValue"
                                              Value="item.DateTime" />
                        }
                        else if (item.Type is TypeOfInput.ColorPicker)
                        {
                            <input class="form-control color-preview" type="color" @bind="item.Value" />
                        }
                        else if (item.Type is TypeOfInput.CheckBox)
                        {
                            <input type="checkbox"
                                   checked="@item.Valuebool"
                                   @onchange='(x => item.Valuebool = ((bool)x.Value))' />
                        }
                        else if (item.Type is TypeOfInput.File)
                        {
                            <InputFile class="form-control" OnChange="(e)=>Upload(e,item)" multiple />
                        }
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="form-actions">
        <button class="btn btn-success" @onclick="Add">
            @(Key == default ? basicResource["Add"] : basicResource["Edit"])
        </button>
        <button class="btn btn-warning" @onclick="Clear">
            @basicResource["Clear"]
        </button>
    </div>
</div> 