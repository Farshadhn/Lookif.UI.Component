@namespace Lookif.UI.Component.Grids.V2
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using Lookif.UI.Component.Attributes
@using Lookif.UI.Component.Icons
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Localization;
@using Blazored.Modal
@using Blazored.Modal.Services
@using Lookif.UI.Component.Components.SeparatedComponents
@using System.Globalization
@using Lookif.UI.Component.Resources
@inject IStringLocalizer<Resource> basicResource
@using static Newtonsoft.Json.JsonConvert;
@typeparam TSelectItem
@typeparam TItem
@{
    relatedSource = ((IStringLocalizer)Resource)?.GetAllStrings()?.ToList();
    commonResource = ((IStringLocalizer)basicResource)?.GetAllStrings()?.ToList();
}

<div class="grid-container">
    <div class="grid-wrapper">
        <div class="grid-header">
            <div class="grid-row header-row">
                @foreach (var item in PropertiesInformation)
                {
                    if (item.Key || item.PropertyName == "Id")
                        continue;

                    <div class="grid-cell header-cell @(GetSortIconActiveClass(item.PropertyName))" 
                         style="min-width: @item.Width;"
                         @onclick="() => ToggleSort(item.PropertyName)">
                        <div class="header-content">
                            <span class="header-text">
                                @{
                                    if (relatedSource is null)
                                    {
                                        @(item.Displayname ?? item.PropertyName)
                                    }
                                    else
                                    {
                                        var value = relatedSource.FirstOrDefault(x => x.Name == @item.PropertyName)?.Value;
                                        @(string.IsNullOrEmpty(value) ? item.PropertyName : value)
                                    }
                                }
                            </span>
                            <div class="sort-indicator">
                                <i class="oi @(GetSortIconClass(item.PropertyName))"></i>
                            </div>
                        </div>
                    </div>
                }
                <div class="grid-cell header-cell actions-cell">
                     
                </div>
            </div>
        </div>

        <div class="grid-body">
            @if (PagedRecords is null || !PagedRecords.Any())
            {
                <div class="grid-row">
                    <div class="grid-cell no-records">
                        <p>@basicResource["NoRecord"]</p>
                    </div>
                </div>
            }
            else
            {
                @foreach (var record in PagedRecords)
                {
                    var Id = record.FirstOrDefault(x => x.ObjectName == "Id")?.ObjectValue;
                    <div class="grid-row">
                        @foreach (var item in record.Where(x => x.ObjectName != "Id"))
                        {
                            <div class="grid-cell" data-label="@(relatedSource?.FirstOrDefault(x => x.Name == item.ObjectName)?.Value ?? item.ObjectName)">
                                @if (item.ObjectDisplayType == DisplayType.Color)
                                {
                                    <div class="color-preview" style="background-color: @item.ObjectValue;"></div>
                                }
                                else
                                {
                                    @(DateTime.TryParse(@item.ObjectValue, out DateTime date) 
                                        ? (date == DateTime.MinValue ? "-" : date.Date.ToString("yyyy/MM/dd")) 
                                        : @item.ObjectValue)
                                }
                            </div>
                        }
                        <div class="grid-cell actions-cell">
                            <div class="action-buttons">
                                @if (EditBtn)
                                {
                                    <button class="action-btn edit-btn" @onclick="() => Edit(Id)">
                                        <Edit />
                                    </button>
                                }
                                @if (DeleteBtn)
                                {
                                    <button class="action-btn delete-btn" @onclick="() => Delete(Id)">
                                        <Delete />
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <div class="grid-footer">
        <div class="footer-content">
            <div class="records-info">
                <span>@basicResource["Total"]: @FilteredRecords!.Count</span>
                <span class="separator">|</span>
                <span>@basicResource["PageNumber"]: @CurrentPage @basicResource["From"] @((int)Math.Ceiling((double)FilteredRecords!.Count / Count))</span>
            </div>

            @if (!(PagedRecords is null || !PagedRecords.Any()))
            {
                <div class="pagination">
                    @{
                        int pages = (int)Math.Ceiling((double)FilteredRecords!.Count / Count);
                        var firstPage = Math.Max(1, CurrentPage - 2);
                        var lastPage = Math.Min(pages, CurrentPage + 2);

                        if (firstPage > 1)
                        {
                            <button class="page-btn" @onclick="() => ChangePage(1)">1</button>
                            if (firstPage > 2)
                            {
                                <span class="page-ellipsis">...</span>
                            }
                        }

                        for (int i = firstPage; i <= lastPage; i++)
                        {
                            int pageNumber = i;
                            <button class="page-btn @(pageNumber == CurrentPage ? "active" : "")" @onclick="() => ChangePage(pageNumber)">
                                @pageNumber
                            </button>
                        }

                        if (lastPage < pages)
                        {
                            if (lastPage < pages - 1)
                            {
                                <span class="page-ellipsis">...</span>
                            }
                            <button class="page-btn" @onclick="() => ChangePage(pages)">@pages</button>
                        }
                    }
                </div>
            }

            <div class="page-size-selector">
                <span>@basicResource["NumerOfRecordsInAPage"]</span>
                <select @bind="Count" class="page-size-select">
                    <option value="10">10</option>
                    <option value="25">25</option>
                    <option value="50">50</option>
                    <option value="100">100</option>
                </select>
            </div>
        </div>
    </div>
</div>

 