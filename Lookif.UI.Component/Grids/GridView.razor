@namespace Lookif.UI.Component.Grids
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using Lookif.UI.Component.Attributes
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Localization;
@using Blazored.Modal
@using Blazored.Modal.Services
@using Lookif.UI.Component.Components.SeparatedComponents
@using System.Globalization
@using Lookif.UI.Component.Resources
@inject IStringLocalizer<Resource> basicResource
@using static Newtonsoft.Json.JsonConvert;
@typeparam TSelectItem
@typeparam TItem
@{
    var relatedSource = ((IStringLocalizer)Resource)?.GetAllStrings()?.ToList();

}



@if (!CultureInfo.CurrentCulture.TextInfo.IsRightToLeft)
{


    <style>
        .myGridView {
            text-align: left;
            direction: ltr;
        }
    </style>
}
else
{
    <style>
        .myGridView {
            text-align: right;
            direction: rtl;
        }
    </style>
}

<div class="col-12 card myGridView" style="overflow-x: scroll;">

    <table class="table table-hover table-responsive">
        <thead>
            <tr style="background-color: gainsboro;">
                @{
                    foreach (var item in PropertyInformations)
                    {
                        if (item.Key || item.PropertyName == "Id") //we Dont want to show Id
                            continue;

                        <th style=" text-align-last: center; min-width: 15vw;">
                            <span style="vertical-align: middle;font-size:larger;">
                                @{
                                    if (relatedSource is null) // When there is no source file
                                    {
                                        if (@item.Displayname is null) // when there is no displayName
                                        {
                                            @item.PropertyName
                                        }
                                        else
                                        {
                                            @item.Displayname
                                        }
                                    }
                                    else
                                    {
                                        var value = relatedSource.FirstOrDefault(x => x.Name == @item.PropertyName)?.Value;
                                        if (value == "")
                                        {
                                            @item.PropertyName
                                        }
                                        else
                                        {
                                            @value
                                        }

                                    }
                                }

                            </span>
                            @*<div>
                                    <span style="vertical-align: middle;cursor: pointer" class="oi oi-sort-ascending" @onclick="() => Sort(item.PropertyName, SortOrder.Asc)"></span>
                                    <span style="vertical-align: middle; cursor: pointer;transform: rotate(180deg);" class="oi oi-sort-ascending" @onclick="() => Sort(item.PropertyName, SortOrder.Desc)"></span>
                                </div>*@
                            <div>
                                <input type="text" @bind="item.Value" style="width: 70%;" @onkeyup="Search" />
                            </div>
                        </th>
                    }
                }

                <th></th>
            </tr>
        </thead>
        @if (PagedRecords is null || !PagedRecords.Any())
        {
            <tr>
                <td colspan="@PropertyInformations.Count()">
                    <p>@basicResource["NoRecord"]</p>
                </td>
            </tr>
        }
        else
        {
            @foreach (var record in PagedRecords)
            {

                <tr style=" text-align-last: center;">
                    @{
                        var Id = string.Empty;
                        @foreach (var item in record)
                        {

                            if (item.ObjectName == "Id")
                            {
                                Id = item.ObjectValue;

                            }
                            else
                            {
                                <td style="vertical-align: middle;font-size: large;font-weight: 100">
                                    @item.ObjectValue
                                </td>
                            }
                        }
                <td>


                    @if (EditBtn)
                    {
                        <i class="far fa-edit p-2" style="cursor:pointer;color:green" @onclick="() => Edit(Id) " ></i>

                    }
                    @if (DeleteBtn)
                    {
                        <i class="far fa-trash-alt p-2 " style="cursor:pointer;color:red" @onclick='() => Delete(Id)'></i> 

                    }


                </td>
                    }
                </tr>
            }
        }
    </table>

    <div class="row">
        <div class="col-3">

            <p>
                @basicResource["Total"]:

                @FilteredRecords!.Count

            </p>


        </div>
        <div class="col-4">

            @if (!(PagedRecords is null || !PagedRecords.Any()))
            {

                <div class="d-flex  justify-content-center">
                    @{
                        try
                        {

                            int pages = (int)Math.Ceiling((double)FilteredRecords!.Count / Count);

                            var firstPage = (CurrentPage > 5) ? CurrentPage - 4 : 1;
                            var lastPage = (CurrentPage + 5 > pages) ? pages : CurrentPage + 5;
                            for (int i = firstPage; i <= lastPage; i++)
                            {
                                int y = i;
                                <div style="cursor: pointer;border-radius:0px;background-color:@(y == CurrentPage ?"lightblue":"lightgray")" class="pd-2 btn" @onclick="() => ChangePage(y)">@i</div>
                            }
                        }
                        catch (Exception e)
                        {

                        }

                    }

                </div>
            }
        </div>
        <div class="col-3">
            <select @bind="Count">

                <option value="5">5</option>
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
                <option value="100">100</option>

            </select>
        </div>
    </div>
</div>